/*----------------------------------------------------------------------------------+|	File:		glUtils.cpp															|														|																					||	Contains various GL-related "utility" functions, some of which are adpated from	||	"Numerical Recipes in C".														||	The error handling code should be modified at some point but for the time being	||	this will have to do.															|+----------------------------------------------------------------------------------*/#include <cstdio>#include <cstdlib>//#include "glUtils.h"#include "errorHandling.h"/*----------------------------------------------------------------------------------+| Prints the indicated error message and invokes the function exit()				|																		| 							               			        				+----------------------------------------------------------------------------------*/void glUtilError(const std::string& error_text){	fprintf(stderr,"gl alloc run-time error...\n");	fprintf(stderr,"%s\n",error_text.c_str());	fprintf(stderr,"...now exiting to system...\n");	exit(1);}/*----------------------------------------------------------------------------------+| Allocates a GLfloat vector with range [nl..nh]									|																		| 							               			        				+----------------------------------------------------------------------------------*/GLfloat* glfVector(int nl, int nh){	GLfloat*v ;	v = new GLfloat[nh-nl+1];	if (!v)		glUtilError("allocation failure in glfVector()");	for (int i=nl; i<=nh; i++)		v[i] = 0.f;	return v-nl;}/*----------------------------------------------------------------------------------+| Allocates a GLdouble vector with range [nl..nh]									|																		| 							               			        				+----------------------------------------------------------------------------------*/GLdouble* gldVector(int nl, int nh){	GLdouble* v;	v = new GLdouble[nh-nl+1];	if (!v)		glUtilError("allocation failure in gldVector()");	for (int i=nl; i<=nh; i++)		v[i] = 0.0;	return v-nl;}/*----------------------------------------------------------------------------------+| Allocates a GLuint vector with range [nl..nh]										|																		| 							               			        				+----------------------------------------------------------------------------------*/GLuint* gluiVector(int nl, int nh){	GLuint* v;	v = new GLuint[nh-nl+1];	if (!v)		glUtilError("allocation failure in gluiVector()");	for (int i=nl; i<=nh; i++)		v[i] = 0;	return v-nl;}/*----------------------------------------------------------------------------------+| Allocates a GLint vector with range [nl..nh]										|																		| 							               			        				+----------------------------------------------------------------------------------*/GLint* gliVector(int nl, int nh){	GLint* v;	v = new GLint[nh-nl+1];	if (!v)		glUtilError("allocation failure in glintVector()");	for (int i=nl; i<=nh; i++)		v[i] = 0;	return v-nl;}/*----------------------------------------------------------------------------------+| Allocates a GLfloat matrix with range [nrl..nrh][ncl..nch]						|																		| 							               			        				+----------------------------------------------------------------------------------*/GLfloat** glfMatrix(int nrl, int nrh, int ncl, int nch){	short	i;	GLfloat **m;	m = new GLfloat *[nrh-nrl+1];	if (!m) glUtilError("allocation failure 1 in glfMatrix()");	m -= nrl;	for(i=nrl;i<=nrh;i++)	{		m[i]= new GLfloat[nch-ncl+1];		if (!m[i]) glUtilError("allocation failure 2 in glfMatrix()");		m[i] -= ncl;	}	for (int i=nrl; i<=nrh; i++)		for (int j=ncl; j<=ncl; j++)			m[i][j] = 0.f;	return m;}/*----------------------------------------------------------------------------------+| Allocates a GLdouble matrix with range [nrl..nrh][ncl..nch]						|																		| 							               			        				+----------------------------------------------------------------------------------*/GLdouble** gldMatrix(int nrl, int nrh, int ncl, int nch){	short	 i;	GLdouble **m;	m = new GLdouble *[nrh-nrl+1];	if (!m) glUtilError("allocation failure 1 in gldMatrix()");	m -= nrl;	for(i=nrl;i<=nrh;i++)	{		m[i]= new GLdouble[nch-ncl+1];		if (!m[i]) glUtilError("allocation failure 2 in gldMatrix()");		m[i] -= ncl;	}	for (int i=nrl; i<=nrh; i++)		for (int j=ncl; j<=ncl; j++)			m[i][j] = 0.f;	return m;}/*----------------------------------------------------------------------------------+| Frees a GLfloat vector allocated by glfvector()									|																		| 							               			        				+----------------------------------------------------------------------------------*/void free_glfVector(GLfloat *v, int nl, int nh){	if ( v!= NULL)	{		v += nl;		delete []v;	}}/*----------------------------------------------------------------------------------+| Frees a GLdouble vector allocated by glfvector()									|																		| 							               			        				+----------------------------------------------------------------------------------*/void free_gldVector(GLdouble *v, int nl, int nh){	if ( v!= NULL)	{		v += nl;		delete []v;	}}/*----------------------------------------------------------------------------------+| Frees a GLuint vector allocated by gluiVector()									|																		| 							               			        				+----------------------------------------------------------------------------------*/void free_gluiVector(GLuint *v, int nl, int nh){	if ( v!= NULL)	{		v += nl;		delete [] v;	}}/*----------------------------------------------------------------------------------+| Frees a GLint vector allocated by gliVector()										|																		| 							               			        				+----------------------------------------------------------------------------------*/void free_gliVector(GLint *v, int nl, int nh){	if ( v!= NULL)	{		v += nl;		delete [] v;	}}/*----------------------------------------------------------------------------------+| Frees a GLfloat matrix allocated by glfMatrix()									|																		| 							               			        				+----------------------------------------------------------------------------------*/void free_glfMatrix(GLfloat **m, int nrl, int nrh, int ncl,  int nch){	short	i;	if ( m!= NULL)	{		for(i=nrh;i>=nrl;i--)		{			m[i] += ncl;			delete [] m[i];		}		m += nrl;		delete [] m;	}}/*----------------------------------------------------------------------------------+| Frees a GLfloat matrix allocated by glfMatrix()									|																		| 							               			        				+----------------------------------------------------------------------------------*/void free_gldMatrix(GLdouble **m, int nrl, int nrh, int ncl,  int nch){	short	i;	if ( m!= NULL)	{		for(i=nrh;i>=nrl;i--)		{			m[i] += ncl;			delete [] m[i];		}		m += nrl;		delete [] m;	}}