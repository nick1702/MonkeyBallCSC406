#include <iostream>//#include "errorHandling.h"using namespace std;/*--------------------------------------------------------------------------+|	Function called in case of an error while initializing the kinematics.	||	Prints the appropriate error message then exits.						|+--------------------------------------------------------------------------*/void handleError(ErrorCode errCode, const string& message){	if (errCode == kNoCode)	{		cout << message;	}	//	else  switch(errCode/1000)	{		case 1:	//kRobotError/1000:			//			//	Get into the hundreds for the type of robot error			switch((errCode-kRobotError)/100)			{				case 1:	//(kArmKinematicsError-kRobotError)/100:					//	Go into the tens for type of arm kinematics error					//					switch (errCode)					{						case kArmParameters:							cout << "Error while reading the arm's parameters:" << message;							break;													case kToolParameters:							cout << "Error while reading the tool's parameters:" << message;							break;													default:							cout << "Error while initializing the kinematics:" << message;							break;					}					break;									case 2:	//(kJointMovementError-kRobotError)/100:					//	Go into the tens for type of joint mvt error					//					switch (errCode)					{						case kWrongJointMoveType:							cout << "Wrong type of joint motion requested:" << message;							break;													case kInvalidJointConfig:							cout << "Invalid joint configuration requested:" << message;							break;													case kInvalidJointDispl:							cout << "Invalid joint displacement requested:" << message;							break;													default:							cout << "Joint movement error:" << message;							break;					}					break;													//	we couldn't find the specific robot error sent by the program							}			cout << "Robot error: " << message;			break;		default:			cout << "Unknown error code: " << message;			break;	}	exit(errCode);}