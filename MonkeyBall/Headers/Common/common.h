/*==================================================================================+#																					##	File:		common.h															##																					##	Contains all constant and type definitions common to all/most classes of the	##	telerobotics interface application.												##																					##	Author:		jean-yves herve, GRPR, Ecole Polytechnique, October 2000			##				Based on original C/C++ code by a bunch of people:					##					- jyh (Summer 1997 -- 2000)										##					- Roland Apan (Summer 1997)										##					- Veronique Pradines and Pierre-Marc Jodoin (Summer 2000).		# #																					#+==================================================================================*/#ifndef COMMON_H#define COMMON_H//----------------------------------------------------------------------------------//------------------------------------- Constants ----------------------------------////	Classical numerical constants#ifndef M_PI#define M_PI	3.14159265358979   // M_PI is not a part of ANSI C++ anymore [???]#endif#ifndef	PI#define	PI		M_PI#endif#define	TWO_PI			6.28318530717858#define PI_DIV_2		1.5707963267949#define ONE_DIV_PI		0.31830988618379#define ONE_DIV_2PI		0.1591549430919//#define RAD_TO_DEG		57.29577951308232#define DEG_TO_RAD		 0.017453292519943//#define ASCII_BELL      0x07#define ASCII_BS        0x08#define ASCII_LF        0x0A#define ASCII_CR        0x0D#define ASCII_XON       0x11#define ASCII_XOFF      0x13//////	Application-specific constants//#define	kManipString	"manipulator"#define	kVehicString	"vehicle"#define	kCompoString	"composite"#define kRedString		"red"#define	kYellowString	"yellow"#define	kGreenString	"green"#define	kPurpleString	"purple"#define	kCyanString		"cyan"//----------------------------------------------------------------------------------//------------------------------------- Macros ----------------------------------//#define		MOD(a, b)	((a) >= 0 ? (a)%(b) : (a)%(b) + (b))//----------------------------------------------------------------------------------//---------------------------------Enumeration Types -------------------------------////	Error codes//enum ErrorCode{	kNoError = 0,	kNoCode = 1,	//	kNumAllocFailed = 500,    //	//----------------------------	//	kInterfaceError = 1000,			//	Interface-related errors = 1xxx	//	kInterfaceInitError = 1110,			//	kSessionError = 1200,					//	Session-related error codes ---> 12xx	//	kSessionInitError = 1210,	kSessionSpecFileError,	kSessionWrongRobotInfo,	kSessionWrongCameraInfo,		kSessionCantAllocRobots,	//	kVirtualRobotInitError = 1250,	//		  	kOpenGL_relatedError = 1300,			//	OpenGL-related error codes ---> 13xx  	kOpenGLNumAllocError = 1301,  	kOpenGLDrawModuleError = 1350,	//		  	kGLUT_relatedError = 1400,				//	GLUT-related error codes ---> 14xx	//		  	kGLOW_relatedError = 1500,				//	GLOW-related error codes ---> 15xx    //  	kQD3DrelatedError = 1600,				//	QD3D-related error codes ---> 16xx    //	//----------------------------	//	kRobotError = 2000,				//	Error with the robot = 2xxx							//	kArmKinematicsError = 2100,				//	Arm Kinematics-related error codes ---> 21xx	//	kArmKinematicsInit = 2110,						//	initializing errors 211x	kArmParameters,								kToolParameters,							//	kJointMovementError = 2120,						//	joint displacement errors 212x	kWrongJointMoveType,    kInvalidJointConfig,    kInvalidJointDispl,	//	kArmKineComputations = 2130,					//	computational errors 213x    kJacobianComputationError,    kDisplComputationError,    //  	kArmDynamicsError = 2200,				//	Arm Dynamics-related error codes ---> 22xx    //  	kVehiculeKinematicsError = 2300,		//	Can Kinematics-related error codes ---> 23xx    //  	kVehicleDynamicsError = 2400,			//	Car Dynamics-related error codes ---> 24xx    //    kArmPathPlanningError = 2500,			//	Arm Path-planning related errors ---> 25xx    kSplinePathWrongData,    kArmPathPlanTooHighSpeed,    //    kVehiclePathPlanningError = 2600,		//	Vehicle Path-planning related errors ---> 26xx    //	//----------------------------	//		  	kRegistrationError = 3000,		//	Error in the registration module ---> 3xxx  	//  	kRegistrationInitError = 3100,			//	Error while initializing ---> 31xx  	//  	kLinRegistrationError = 3200,			//	Error in linear computations ---> 32xx    kLinRegInitError,	kLinRegNotEnoughMarkers,  	kLinRegIncorrectMarkerData,  	kLinSysWrongDimMatrix,					//	included from LinearSystemSolver  	kLinSysDoesNotConverge,  	kLinSysSingularMatrix,  	kLinSysIllCondMatrix,  	//  	kNonlinRegistrationError = 3300,		//	Error in nonlinear registration ---> 33xx    kNonlinRegInitError,	kNonlinRegNotEnoughMarkers,  	kNonlinRegIncorrectMarkerData,  	kNonlinMinInitError = 3350,						//	nonlinear minimization  	kNonlinMinNoGradFct,  	kNonlinMinTooManyIterations,	//	kRegPoseComputationError = 3400,		//	Error in pose computation ---> 34xx	kRegPoseWrongPitch,		//	-----> temporary error [code in Registration::StateToPose]  	    //	//----------------------------	//		  	kCommunicationError = 4000,		//	Communication-related error codes ---> 4xxx    //	//----------------------------	//		  	kVideoRelatedError = 5000,		//	Video digitizing error codes ---> 5xxx  	//  	kVideoIntializingError = 5100,  	//  	kVideoBufferAllocError = 5200,  	//  	kVideoAcquisitionError = 5300,    //	//----------------------------	kMaxErrorCodeID};//	Different types of robots recognized by the application//enum RobotType{    kNoRobotType = -1,    kManipulator = 0,			//	only one implemented so far    kVehicle,					    kCompositeRobot,    kNumberRobotTypes};//	Marker colors enum ColorType{	kNoColorType = -1,	kRedColor = 0,	kYellowColor,	kGreenColor,	kPurpleColor,	kCyanColor,	kNumberColorTypes};//	Indices for RGB arrays (e.g. material reflectance properties)enum RGBIndex{	kRedIdx = 0,	kGreenIdx = 1,	kBlueIdx = 2};//	Rendering modes//enum RenderingMode {		kWireframeRender,		kShadingRender};//----------------------------------------------------------------------------------//------------------------------------- Data Types ---------------------------------//using byte = unsigned char;//	Object (incl. camera) 6D pose data structure//struct Pose{	double	Tx, Ty, Tz,				//	position			Roll, Pitch, Yaw;		//	Yaw-Pitch-Roll angles};using PosePtr = Pose*;//	Point 3D coordinates//struct Point3D{	double	X,			Y,			Z;};//	Point using homogeneous coordinates//struct Point4D{	double	X,			Y,			Z,			w;};#endif