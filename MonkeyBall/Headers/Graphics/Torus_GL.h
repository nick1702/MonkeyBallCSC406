/*==================================================================================+#																					##	File:		Torus_GL.h							    							##																					##	Headers for the OpenGL version of the Cylinder class.							##																					##																					##-----------------------------------------------------------------------------------##	Author:			jean-yves herve', Dept of CS, U. of Rhode Island and			##					GRPR, Ecole Polytechnique de Montreal							##																					##	Date Creation:	May 2001														##																					##	Modifications:																	##																					#+==================================================================================*/#ifndef	TORUS_GL_H#define	TORUS_GL_H#include "glPlatform.h"//#include "glUtils.h"#include "GraphicObject_GL.h"//	Levels of radial resolution for cylinders and cones#define		kVeryHighDefCircPts		48	#define		kFineDefCircScale		 2#define		kMediumDefCircScale		 3#define		kCoarseDefCircScale		 4#define		kVeryLowDefCircScale	 6/** A Torus_GL is a "simplified" graphic object that does not maintain its *  own pose.  The user of this class must take care of that.  The Torus_GL is *  completely defined by its outer and inner radii.  The user can also control *  the rendering resolution of the torus.  The "slab" resolution is an abuse *  of the term.  Basically, I treat a torus as a curved cylinder */class Torus_GL{	public:        /** Creates a torus centered at the origin and oriented along the Z axis.           *  This is therefore a "simplified" graphic object that does not maintain its         *  own pose.  The user of this class must take care of that.         *  @param innerRadius  inner radius of the torus         *  @param outerRadius  outer radius of the torus         */		Torus_GL(const float innerRadius, const float outerRadius);        /** Frees the arrays of vertices and normals         */		virtual ~Torus_GL(void);        /** Initializes the reflectance properties of the object         */        void setMaterial(float params[]);        /** Initializes the reflectance properties of the object         */        void setMaterial(GLfloat ambRed, GLfloat ambGreen, GLfloat ambBlue, GLfloat difRed,        				GLfloat difGreen, GLfloat difBlue, GLfloat specRed, GLfloat specGreen,        				GLfloat specBlue, GLfloat shine);        /** Sets a global resolution for the torus         *  @param  res     "slab" and circle resolution for the torus         */		void setResolution(ResolutionLevel res);        /** Sets "slab" and circle resolutions for the torus         *  @param  circRes     "slab" resolution for the torus         *  @param  slabRes     circle resolution for the torus         */		void setResolution(ResolutionLevel circRes, ResolutionLevel slabRes);				/** Renders the torus in the current graphic context (and at the		 *  current, unknown pose and scale)		 */		void draw(void);					private:        /** Array of vertex coordinates         */		GLfloat	***vertex_;				/** Array of normal vectors at each point		 */		GLfloat ***normal_;				/** Vertex rendering "slab" step (based on resolution)		 */		int	slabStep_;		/** Vertex rendering circle step (based on resolution)		 */		int   circStep_;        /** Ambient light reflection properties (red, gree, blue)         */		GLfloat ambientMat_[3];        /** light diffusion properties (red, gree, blue)         */		GLfloat diffuseMat_[3];        /** specularity coefficient (red, gree, blue)         */		GLfloat specularMat_[3];		/** surface shinyness		 */		GLfloat shiny_;        /** Sets the GL material properties according to the oarameters         *  stored for this object, prior to drawing the object         */        void setReflectParams_(void);};#endif