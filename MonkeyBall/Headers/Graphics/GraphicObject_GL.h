/*==================================================================================+#																					##	File:		graphicObject_GL.h													##																					##	Headers for the OpenGL version of the GraphicObject class.	This is the parent	##	class for all 3D graphic objects in this application.							##																					##																					##-----------------------------------------------------------------------------------##	Author:			jean-yves herve', Dept of CS, U. of Rhode Island and			##					GRPR, Ecole Polytechnique de Montreal							##																					##	Date Creation:	May 2001														##																					##	Modifications:																	##																					#+==================================================================================*/#ifndef	GRAPHIC_OBJECT_GL_H#define	GRAPHIC_OBJECT_GL_H#include "glPlatform.h"//#include "glUtils.h"#include "graphicsDef.h"//----------------------------------------------------------------------------------//-----------------------------------Class definition-------------------------------//class GraphicObject_GL{	public:		//		//	Constructor and destructor			//		GraphicObject_GL(void);		virtual ~GraphicObject_GL(void);		//		//	Public methods		//		virtual void draw(void);		//		void setMaterial(float params[]);		void setMaterial(GLfloat ambRed, GLfloat ambGreen, GLfloat ambBlue, GLfloat difRed,						GLfloat difGreen, GLfloat difBlue, GLfloat specRed, GLfloat specGreen,						GLfloat specBlue, GLfloat shine);		virtual void setResolution(ResolutionLevel res) = 0;		//		static GLfloat norm(GLfloat *V);		static void normalizeVector(GLfloat *V);		static GLfloat dotProduct(GLfloat *e1, GLfloat *e2);		static void crossProduct(GLfloat *e1, GLfloat *e2, GLfloat *nv);		static void commonNormalVector(GLfloat *e1, GLfloat *e2, GLfloat *nv);		static void faceExactNormal(GLfloat *v0, GLfloat *v1, GLfloat *v2, GLfloat *nVect);		static void faceAverageNormal(GLuint n, GLfloat **v, GLfloat *nVect);		static void faceAverageNormal(GLuint *index, GLfloat **v, GLfloat *nVect);		static void faceAverageNormal(GLfloat *v0, GLfloat *v1, GLfloat *v2, GLfloat *v3,								GLfloat *nVect);		static void vertexAverageNormal(GLfloat *v0, GLfloat *v1, GLfloat *v2, GLfloat *d,								GLfloat *nVect);									protected:		//		GLfloat		ambientMat[3],					diffuseMat[3],					specularMat[3],					shiny;		void setReflectParams_(void);				// full class		float X_, Y_, Z_;		//	representation of orientation				// velocity and spin};#endif