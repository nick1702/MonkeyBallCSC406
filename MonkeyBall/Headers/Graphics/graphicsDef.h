/*==================================================================================+#																					##	File:		graphicsDef.h														##																					##	Types and constants for the 3D graphics											##																					##																					##-----------------------------------------------------------------------------------##	Author:			jean-yves herve', Dept of CS, U. of Rhode Island and			##					GRPR, Ecole Polytechnique de Montreal							##																					##	Date Creation:	May 2001														##																					##	Modifications:																	##																					#+==================================================================================*/#ifndef	GRAPHICS_DEF_H#define GRAPHICS_DEF_H//----------------------------------------------------------------------------------//---------------------------------- Constants & Macros ----------------------------////	Levels of radial resolution for cylinders and cones#define		kVeryHighDefCircPts		48	#define		kFineDefCircScale		 2#define		kMediumDefCircScale		 3#define		kCoarseDefCircScale		 4#define		kVeryLowDefCircScale	 6////	Degrees of resolution along the axis ("slabs") for cylinders, prisms, cones#define		kVeryHighDefSlabs		16#define		kFineDefSlabScale		 2#define		kMediumDefSlabScale		 4#define		kCoarseDefSlabScale		 8#define		kVeryLowDefSlabScale	16//	Object type strings recognized by the 3D file parser#define		kOpenBoxStr				"OPEN_BOX"#define		kClosedBoxStr			"BOX"#define		kOpenCylinderStr		"OPEN_CYLINDER"#define		kClosedCylinderStr		"CYLINDER"#define		kTubularSectionStr		"TUBULAR_SECTION"#define		kOpenHalfCylinderStr	"OPEN_HALF_CYLINDER"#define		kClosedHalfCylinderStr	"HALF_CYLINDER"#define		kOpenPrismStr			"OPEN_PRISM"#define		kClosedPrismStr			"PRISM"#define		kOpenConeStr			"OPEN_CONE"#define		kClosedConeStr			"CONE"#define		kOpenHalfConeStr		"OPEN_HALF_CONE"#define		kClosedHalfConeStr		"HALF_CONE"#define		kPolyhedronStr			"POLYHEDRON"//	Cylinder input formats recognized by the 3D file parser#define		kCylAxesStr				"AXES"		//	origin; major, minor, direction axes#define		kCylRadiusStr			"RADIUS"	//	origin, direction, radius//#define		kCylAxesFormat			0#define		kCylRadiusFormat		1#define		kNbCylFormats			2//	Prism input formats recognized by the 3D file parser#define		kPrismTopAndBotStr		"TOP+BOTTOM"	//	top and bottom faces#define		kPrismBotAndAxisStr		"BOTTOM+AXIS"	//	 bottom face and direction axis//#define		kPrismTopAndBotFormat	0#define		kPrismBotAndAxisFormat	1#define		kNbPrismFormats			2//	Cone input formats recognized by the 3D file parser#define		kAxisAndRadiiStr		"AXIS+RADII"	//	origin, axis, top & bottom radii#define		kCone2n1AxesStr			"2+1_AXES"		//	#define		kCone2n1n2AxesStr		"2+1+2_AXES"	//	//#define		kAxisAndRadiiFormat		0#define		kCone2n1AxesFormat		1#define		kCone2n1n2AxesFormat	2#define		kNbConeFormats			3//	Half-cylinder and half-cone closure types recognized by the 3D file parser#define		kSidesClosedStr			"SIDES"			//	Top and bottom sides closed#define		kLengthClosedStr		"LENGTH"		//	Closed along the length	#define		kAllClosedStr			"ALL_CLOSED"	//	completely closed half shape//#define		kSidesClosedType		0#define		kLengthClosedType		1#define		kAllClosedType			2#define		kNbClosureTypes			3//----------------------------------------------------------------------------------//------------------------------------- Data Types ---------------------------------////	Different levels of resolution for the 3D objects//typedef enum ResolutionLevel{    kVeryHighResolution,    kFineResolution,    kMediumResolution,    kCoarseResolution,    kVeryLowResolution}ResolutionLevel;typedef enum GraphicalObjectType{	kOpenBoxObject = 0,	kClosedBoxObject,	kOpenCylinderObject,	kClosedCylinderObject,	kTubularSectionObject,	kOpenHalfCylinderObject,	kClosedHalfCylinderObject,	kOpenPrismObject,	kClosedPrismObject,	kOpenConeObject,	kClosedConeObject,	kOpenHalfConeObject,	kClosedHalfConeObject,	kPolyhedronObject,	//	kNbObjectTypes}GraphicalObjectType;#endif